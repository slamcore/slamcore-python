name: Slamcore Python bindings CI

on: push

env:
  PACKAGE_NAME: slamcore-dev
  PACKAGE_VERSION: 23.04.31
  DATASET: minimal

jobs:
  build:
    strategy:
      matrix:
        image: ["ubuntu:18.04", "ubuntu:20.04", "ubuntu:22.04"]

    runs-on: ubuntu-latest
    container: ${{matrix.image}}

    outputs:
      WHEEL_NAME_bionic: ${{ steps.build-wheel.outputs.WHEEL_NAME_bionic }}
      WHEEL_NAME_focal: ${{ steps.build-wheel.outputs.WHEEL_NAME_focal }}
      WHEEL_NAME_jammy: ${{ steps.build-wheel.outputs.WHEEL_NAME_jammy }}

    steps:
    - name: Checkout Slamcore Python bindings
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y cmake ninja-build libeigen3-dev python3 python3-pip lsb-release
        python3 -m pip install setuptools "pybind11[global]" mypy numpy wheel

    - name: Get OS codename
      run: echo "OS_CODENAME=$(lsb_release --codename | cut -f2)" >> $GITHUB_ENV

    - name: Download Slamcore Dev package
      uses: slamcore/s3-cp-action@v2
      with:
        aws_access_key_id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws_secret_access_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        source: s3://slamcore-python/signed_packages/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb
        dest: deps/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb

    - name: Install Slamcore Dev package
      run: apt install -y ./deps/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb

    - name: Configure CMake
      run: mkdir build && cd build && cmake .. -GNinja

    - name: Build library
      run: cd build && ninja slamcore_python -v

    - name: Build wheel
      id: build-wheel
      run: |
         cd build && ninja slamcore_python_wheel -v
         WHEEL_NAME=$(basename $(ls python/*.whl))
         echo "WHEEL_NAME_${{env.OS_CODENAME}}=${WHEEL_NAME}" >> $GITHUB_OUTPUT
         echo "WHEEL_NAME=${WHEEL_NAME}" >> $GITHUB_ENV

    - name: Install wheel package
      working-directory: build
      run: python3 -m pip install python/*.whl

    - name: Test import Slamcore Python package
      run: python3 -c 'import slamcore'

    - name: Upload Slamcore wheel package
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.WHEEL_NAME}}
        path: build/python/*.whl

  tests:
    needs: build

    strategy:
      matrix:
        image: ["ubuntu:18.04", "ubuntu:20.04", "ubuntu:22.04"]
        test_suite: ["streams", "subsystems", "misc"]

    runs-on: ubuntu-latest
    container: ${{matrix.image}}

    steps:
    - name: Checkout Slamcore Python bindings
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y zstd libeigen3-dev python3 python3-pip lsb-release
        python3 -m pip install numpy pytest

    - name: Get OS codename
      run: echo "OS_CODENAME=$(lsb_release --codename | cut -f2)" >> $GITHUB_ENV

    - name: Download Slamcore Dev package
      uses: slamcore/s3-cp-action@v2
      with:
        aws_access_key_id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws_secret_access_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        source: s3://slamcore-python/signed_packages/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb
        dest: deps/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb

    - name: Install Slamcore Dev package
      run: apt install -y ./deps/${{env.PACKAGE_NAME}}_${{env.PACKAGE_VERSION}}-${{env.OS_CODENAME}}1_github_amd64.deb

    - name: Get wheel name
      run: |
        WHEEL_NAME_bionic=${{ toJSON(needs.build.outputs.WHEEL_NAME_bionic) }}
        WHEEL_NAME_focal=${{ toJSON(needs.build.outputs.WHEEL_NAME_focal) }}
        WHEEL_NAME_jammy=${{ toJSON(needs.build.outputs.WHEEL_NAME_jammy) }}
        echo "WHEEL_NAME=$WHEEL_NAME_${{env.OS_CODENAME}}" >> $GITHUB_ENV

    - name: Download Slamcore wheel package
      uses: actions/download-artifact@v3
      with:
        name: ${{env.WHEEL_NAME}}
        path: ~/downloads

    - name: Install wheel package
      run: python3 -m pip install ~/downloads/*.whl

    - name: Download dataset (${{env.DATASET}})
      uses: slamcore/s3-cp-action@v2
      with:
        aws_access_key_id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws_secret_access_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        source: s3://slamcore-python/datasets/${{env.DATASET}}.tar.zst
        dest: downloads/${{env.DATASET}}.tar.zst

    - name: Decompress dataset
      run: mkdir datasets && tar --use-compress-program=unzstd -xvf downloads/${{env.DATASET}}.tar.zst -C datasets

    - name: Run tests
      run: python3 -m pytest -v --dataset datasets/${{env.DATASET}} tests/test_${{matrix.test_suite}}.py
